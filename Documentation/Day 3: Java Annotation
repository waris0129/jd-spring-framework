Day 3 :  JAVA Annotation

    review :
            IoC : Inversion of Control

            Dependency Injection:
                        - Inject object into other objects or "dependencies"

            how to inject dependency?
                - Constructor Injection:  <constructor-arg  ref="officeHours" \>
                - Setter Injection :      <property name="setmethodName" ref="officeHours" \>
                - Field Injection :       <


            Bean Scope : (default value with Singleton)
                      - Singleton : only one instance through cycle, sharing same value
                                < scope = "Singleton" \>
                      - Prototype : many instance through cycle, unique value
                                < scope = "Prototype" \>

            Bean LifeCycle :
                    - initMethod : Access modifier can be anything
                    - destroyMethod : Access modifier can be anything
                            - if the scope is Prototype, Destroy Method can not be activated


            Container started --> Bean initiated --> Depedency INject --> Internal Spring Processing
                --> Your Custom Init method
                --> Bean is ready for use

                --> Container is shotdown
                --> your cusom Destroy Method
                STOP

 *********************************JAVA Annotations **********************************

    Spring Configuration :

                    - XML Configuration
                    - Java Annotations
                    - Java Source Code (main gaol)


    *************** Enable Component Scanning *******Ready to scan class*************

    < Context: component-scan base-package = "packageName" />

    @Component : it defined bean for us

    **************** Annotations ************************

                @Component (It is used to mark a class from which a bean will be created)

    @Controller     @Service        @Repository



    Importnat:
        Default Bean IDs

        when springs creates a Bean Definition from @Component annotation, it will create small letter of object

        if class name is Java, default object name is lower case "java"


    *********** @Autowired ****** object injection *********
        1. Constructor Injection
        2. Setter Injection
        3. field Injection

        @Autowired = <constructor-arg ref="objectName" > // Constructor Injection

        @Autowired = <property name="methodName" ref="objectName"> // Setter Injection

        @Autowired = private OfficeHours officeHours; // Field Injection

    @Autowired  is replaced previous xml syntax <constructor-arg ref="objectName"/>

    Constructor-Injection:
    remark: if there is only one constructor in class, we do not need to provide @Autowired annotation

    but if there is multiple construcotr, we must given one @Autowired in order to Container to
    recognize it.



    ********** @Qualifier ***** Interface implement two class **************

    @Qualifer :
        - helps to pick implementd class from multiple sub class

    in interface how Spring pick class

    when Interface implement two class at same time

    ExtraSessions is interface

    1)    public class MockInterviewHours implements ExtraSessions { }
    2)    public class OfficeHours implements ExtraSessions { }


    way 1 : constructor injecgtion
        public Java (@Qualifier("officeHours") ExtraSessions extraSessions){
            this.extraSessions = extraSessions;
        }

    way 2 : filed injection
            @Autowired
            @Qualifier("officeHours")
            private ExtraSessions extraSessions;



    in Way 1 ConstructorInjection:  we only need one Annotation @Qualifier within argument
    in Way 2 FieldInjection : we need two Annotation @Autowired and @Qualifier


    ************* @Value ***** inject value ******Properties xml file*******

    @value : in ject value into fields in Spring-Mnaged beans and it can be applied at the field
    or construcotor / method parameter level.

    @Value("value") -> from annotation field
    @Value("${value}") -> injecting from property files
    @Value("@{value}") -> injecting bunch of value from property files


    ***************** XML Config ******* Properties file *******************
    Importnat :
        new tag :
            <context:property-placeholder location="application.properties"/>




    Very Important :
        the Properties xml file is become a initiate point for whole project



****Very Important******************* Java Configuration *********@Configuration*********Java Code*************************

    Object Injections :
                        - Constructor Injection
                        - Setter Injection
                        - Filed Injection


    Spring Configuration:
                            - XML Configuration :
                                    1) Constructor Injection : <constructor-arg ref="className" />
                                    2) Setter Injection: <parameter name="methodName" ref="className" />

                            - JAVA Annotation :
                                    xml insert syntax : < Context: component-scan base-package = "packageName" />

                                    @Component : Spring boot recognize the class is agreed to create bean

                                    @Autowired
                                            - Constructor Injection
                                            - Setter Injection
                                            - Field Injection
                                    @Autowired replaced previous xml syntax to annotation used in class and method level

                                    @Qualifer
                                        if there is two class implement same interface, we need @Qualifier to indicate which class
                                        we going to use for creating object


                                           -  way 1 : constructor injecgtion
                                                   public Java (@Qualifier("officeHours") ExtraSessions extraSessions){
                                                       this.extraSessions = extraSessions;
                                                   }

                                           -  way 2 : filed injection
                                                       @Autowired
                                                       @Qualifier("officeHours")
                                                       private ExtraSessions extraSessions;


                                    @Value
                                        - work with additional xml file
                                        - insert config.xml file <context:property-placeholder location="application.properties"/>

                            - Java Source Code :


    Now we need to replace XML File with following two tags.

     @Configuration -  replace config.xml file

     @ComponentScan - <context:component-scan base-package="com.cybertek.services"/>

    ------------------------------------------------------

    1) syntax for config:
        ApplicationContext context = new AnnotationConfigApplicationContext(CybertekAppConfig.class);

            - remark :
                - spring goes to CybertekAppConfig.class to create beans


    2) give proper annotation to config class
            @Configuration
            @ComponentScan("com.cybertek")
           public class CybertekAppConfig { }



    ------------------@Bean_____________________

   @Bean : create object for Spring boot, but it is method level

   Very Important :
        @Component  v.s  @Bean

        @Component - class level
        @Bean - method level

   why we need @Bean?
   An: sometimes we need third party module, in this case we need to create instance of third pary module.